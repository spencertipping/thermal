sdocp('client//thermal.js.sdoc', 'Thermal page driver | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\n$(caterwaul.clone(\'std continuation seq montenegro\')(function () {\n\nRPC setup.\nThese functions are CPS-converted interfaces to the server database.\n\n  var rpc = {stories: montenegro.rpc(\'/stories\'), story: montenegro.rpc(\'/story\')};\n\nMVC components.\nThese construct views and controllers for data that gets downloaded from the server.\n\n  var mvc = let[inv(f, g) = (f.inverse = g).inverse = f] in\n            {story: let[comment_post_ui() = html[div.post > textarea > button(\'Post\')],\n                        energy_ui(energy) = html[div.energy > div.bar /css({width: energy << 2})]] in\n                    inv(fn[story][html[div.story > div.header(h1(story.name), span.owner(story.owner), energy_ui(story.energy))\n                                                 > div.comments(seq[~story.comments *[mvc.comment(_)]]) > comment_post_ui()]],\n                           fn[ui][{todo: true}])};\n\nInitial body elements.\nThere are two things in the body at first. One is a collection of stories, and the other is a link to create a new story. Because the link may be accompanied by others at some point, I\'m\nputting it in a toolbar div.\n\n  $(\'body\').append(html[div /attr(\'id\', \'stories\') > span.loader(\'Loading...\'), div /attr(\'id\', \'toolbar\') > a.createstory(\'Create new story\')]);\n\nUser interface toplevel components.\nThere are a couple of things that need to happen at the toplevel. First, we need to issue a load request for all of the stories that currently exist. Then, we need to install a sensible\ndefault behavior for the \'create new story\' link.\n\n  let/cps[stories <- rpc.stories(_)][$(\'#stories\').empty().append(stories.map(story))];\n  $(\'#toolbar .createstory\').clickable(fn_[mvc.story(mvc.story.blank).appendTo(\'#stories\')]);\n');