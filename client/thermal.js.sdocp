sdocp('client//thermal.js.sdoc', 'Thermal page driver | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\n$(caterwaul.clone(\'std continuation seq montenegro\')(function () {\n  $(\'body\').append(html[div > div.toolbar(button.new_story > \'New story\') > div.left_column(h1(\'Progress\'), div.all_stories) > div.right_column(h1(\'Comments\'), div.all_comments)]);\n\n  var story = {} /se[_.create(o)     = caterwaul.util.merge({}, o || {}) /se[_.id       = caterwaul.gensym(),\n                                                                             _.name     = _.name     || prompt(\'Please enter a name for the new story.\'),\n                                                                             _.comments = _.comments || [],\n                                                                             _.initials = _.initials || me.initials],\n\n                     _.small_view(o) = html[div.story   %is(o) > span.name(o.name) > span.initials(o.initials) > span.status(o.status) > span.energy(o.energy) > a.arrow(\'>>\')],\n                     _.comment(o)    = html[div.comment %is(o) > span.author(o.author) > span.text(o.text)],\n                     _.comments(o)   = html[div.comments > div.list(seq[~o.comments *+story.comment]) > div.new_comment(textarea, button(\'Post\'))],\n\n                     _.json(ui)      = let[field(f) = {} /se[_[f] = ui.find(\'.#{f}\').text()]] in\n                                       caterwaul.util.merge({id: ui.attr(\'id\')}, seq[~\'name initials status energy\'.split(/\\s/) *+field /+caterwaul.util.merge],\n                                                                                 {comments: seq[~ui.find(\'.comment\') *[{author: _.find(\'.author\').text(), text: _.find(\'.text\').text()}]]}),\n                     _.save(ui)      = story.json(ui) /se[rpc.story(_.id, _)],\n                     _.load(ui)      = rpc.story(ui.attr(\'id\'), _) /cps[ui.replaceWith(story.small_view(_))],\n\n                     where[is(x)(e) = e.data(\'original\', x).attr(\'id\', x.id)]];\n\n  var active_story = null;\n  $(\'.story .arrow\')      .live(\'click\', _) /cps[active_story = $(\'.all-comments\').empty().append(story.comments($(this).up(\'.story\').data(\'original\')))];\n  $(\'.new-story\')         .live(\'click\', _) /cps[$(\'.all-stories\').append(story.small_view(story.create()) /se[story.save(_)])];\n  $(\'.new-comment button\').live(\'click\', _) /cps[$(this) /se[_.nearest(\'.list\').append(story.comment({author: me.name, text: _.nearest(\'textarea\').val()})),\n                                                             _.nearest(\'textarea\').val(\'\'),\n                                                             story.save(active_story)]];\n\nIdentity.\nThere isn\'t any authentication or security for this application. The user just provides a name and the initials are inferred.\n\n  var me = {name: \'User Name\', initials: \'UN\'};\n\nRPC setup.\nThese functions are CPS-converted interfaces to the server database.\n\n  var rpc = caterwaul.montenegro.rpc /re[{stories: _(\'/stories\'), story: _(\'/story\')}];\n\nStory loader.\n\n  let/cps[stories <- rpc.stories(_), name <- seq[~stories %s[s] *!+_], s <- rpc.story(name, _)]\n         [$(\'.all-stories\').append(story.small_view(s))]}));\n');